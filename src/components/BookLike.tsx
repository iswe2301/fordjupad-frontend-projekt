import { useState, useEffect } from "react";
import { likeBook, unlikeBook, getBookLikes, getUserLikedBooks } from "../services/bookLikeApi";
import { useAuth } from "../context/AuthContext";

// Props f√∂r komponenten
interface BookLikeProps {
    bookId: string; // Bok-ID
    onUnlike?: () => void; // Funktion f√∂r att ta bort gillning
}

// Komponent f√∂r att gilla en bok
const BookLike: React.FC<BookLikeProps> = ({ bookId, onUnlike }) => {

    // H√§mta inloggad anv√§ndare och token
    const { user } = useAuth();
    const token = localStorage.getItem("token");

    // States
    const [likes, setLikes] = useState<number>(0);
    const [liked, setLiked] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);

    // H√§mta likes vid rendering av komponenten
    useEffect(() => {
        fetchLikes();
    }, [bookId]); // Uppdatera n√§r bok-ID √§ndras

    // H√§mta antal likes och om anv√§ndaren har gillat boken
    const fetchLikes = async () => {
        try {
            // H√§mta antal likes f√∂r boken
            const bookLikes = await getBookLikes(bookId);
            setLikes(bookLikes); // Uppdatera state med antal likes

            // Om anv√§ndaren √§r inloggad, h√§mta deras gillade b√∂cker
            if (user && token) {
                const likedBooks = await getUserLikedBooks(token);
                setLiked(likedBooks.includes(bookId)); // Uppdatera state med gillning
            }
        } catch (error) {
            setError("Kunde inte h√§mta likes f√∂r boken.");
        }
    };

    // Funktion f√∂r att hantera gillningar
    const handleLike = async () => {
        // Kontrollera att anv√§ndare och token finns
        if (!user || !token) {
            setError("Du m√•ste vara inloggad f√∂r att gilla en bok.");
            return;
        }
        try {
            // Kontrollera om boken √§r gillad
            if (liked) {
                await unlikeBook(bookId, token); // Ogilla boken
                setLiked(false); // Uppdatera state
                setLikes((prev) => Math.max(0, prev - 1)); // Uppdatera antal likes (minst 0)
                if(onUnlike) onUnlike(); // Anropa onUnlike om funktionen finns
            } else {
                await likeBook(bookId, token); // Gilla boken
                setLiked(true); // Uppdatera state
                setLikes((prev) => prev + 1); // Uppdatera antal likes
            }
        } catch (error) {
            setError("Kunde inte gilla boken. F√∂rs√∂k igen.");
        }
    };

    return (
        <div className="mb-4">
            {/* Knapp f√∂r att gilla boken, anropa handleLike vid klick */}
            <button
                className={`btn ${liked ? "btn-primary" : "btn-outline-primary"}`}
                onClick={handleLike}
            > {/* Visa olika text och ikon beroende p√• om boken √§r gillad */}
                {liked ? "ü§ç Gillad" : "üíô Gilla"} ({likes})
            </button>
            {error && <p className="text-danger mt-4">{error}</p>}
        </div>
    );
};

export default BookLike;